wsl.exe --update
wsl --install
docker -v
docker pull [imgName]
docker pull [imgName]:[version]
docker run [imgName]
docker images
docker search [imgName]
docker ps/ docker container ls
docker ps -a
docker run --name abcContainer -d [imgName or imgId] -> in detach mode
docker run -it -d [imgName] -> interactive mode + detach mode
docker exec -it [containerId] [cmd which u want to exec eg python3/jshell/bash, u can see this in docker ps]
docker exec -i -t [containerId] sh
mysql -p -> for mysql terminal
/exit -> to exit from jshell
docker run --name [xyz] -e MYSQL_ROOT_PASSWORD=[password eg root] -d [imgName]
docker inspect [containerId/imgId] 
docker run --name [nginxServer] -d -p 8080:80 [imgName]
docker stop [containerName or Id]
docker start [containerName or Id]
docker restart [containerName or Id] -> when config changed for nginx or anything then we restart like this
docker kill [containerName or Id] -> force stop
docker rm [containerId] [another Id if to stop more containers]
docker rm -f [containerId]
docker rmi [imgName]

docker system prune -a -f -> will remove all cache so when creating img again will download everything again


[
 docker run -it ubuntu
 touch names.txt
 echo "message"
 docker start [containerId]
 docker exec -it [containerId] bash 
 docker commit -m "added txt file" [containerId] [imgName, custom name]
 docker stop [containerId]
 docker run -it [imgName, used ]
]

[
docker run -it ubuntu
apt-get update
apt-get install -y python3
]


docker login
docker commit
docker push
docker network
docker copy
docker logs [containerName]
docker volume
docker logout

docker build -t [tag img Name] . -> to build img in . curr folder

...................................

sudo su -> to get super user access
docker run -it -d --name [abcContainername] -p 80:80 [imgName] -> interactice, detach mode, name, port publish at 0.0.0.0:80->80 localhost0.0.0.0 80 is default of container
[
docker exec -it [containerName] bash
apt update
apt install nginx -y -> y puts yes if it askes for it
service nginx status -> status of nginx
service nginx start -> start nginx
exit
take ip address of VM & put in browser to run nginx
]

docker commit [containerId] [newImgName] -> when we want to save all configs which we did in container, we have to give it a new img name
docker tag [imgName] [username/newImgName] -> to give new name to an img, give username of docker hub & then /
docker login
docker push [username/newImgName:tagname] -> to push img with given tag version

Few Docker File Commands: FROM, WORKDIR, ADD, COPY, RUN, CMD, VOLUME, EXPOSE, ENTRYPOINT, LABEL
[
main.py
dockerfile
 [
  FROM ubuntu:latest
  WORKDIR /app -> creates a work dir (to run shell cmds in this dir during build time of img) /app if not present
  ADD . /app -> everything in my local curr dir goes to /app
  RUN apt update && apt install python -y                    -> \ &  | can also be used to merge into 1 layer
  CMD python /app/main.py
  CMD ["service", "nginx", "start"]
  LABEL maintainer="sagichani@pxc.com" 
 ]
docker build -t [custom-img-name] . -> build img & find docker file in . curr dir
]

............................................

Storage: Volumes, Bind Mount, Tmpfs mount

docker volume create [volName] -> create volume
docker volume ls
docker volume inspect [volName] -> more info of vol
docker volume rm [volName] -> remove vol
docker volume prune -> del all






